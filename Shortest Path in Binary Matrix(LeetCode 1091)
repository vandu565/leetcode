class Solution {
    class Pair{
        int distance;
        int row;
        int col;

        Pair(int distance,int  row,int col){
            this.distance=distance;
            this.col=col;
            this.row=row;
        }

    }
    public int shortestPathBinaryMatrix(int[][] grid) {

        
        int n=grid.length;
        int m=grid[0].length;

        if (grid[0][0] == 1 || grid[n-1][m-1] == 1) {
             return -1;
        }

        if(n == 1 && grid[0][0] == 0) return 1;


        Queue<Pair> q=new LinkedList<>();
        int dist[][]=new int[n][m];

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                dist[i][j]=(int)(1e9);
            }
        }

        dist[0][0]=1;
        q.add(new Pair(1,0,0));

        while(!q.isEmpty()){
            int row= q.peek().row;
            int col= q.peek().col;
          //  int distance= q.peek().distance;
          int distance=dist[row][col]; //can also write this
            q.remove();

            for(int i=-1;i<=1;i++){
                for(int j=-1;j<=1;j++){

                int nrow=row+i;
                int ncol=col+j;

             if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol]==0){
                if(distance+1<dist[nrow][ncol]){
                    dist[nrow][ncol]=distance+1;

                    if(nrow==n-1 && ncol==m-1){return  dist[nrow][ncol];}

                    q.add(new Pair(distance+1,nrow,ncol));
                }

                }
                }
            }

        }
         
         //if not reached n-1,m-1
        // if(dist[n-1][m-1]==(int)(1e9)){
        //     return -1;
        // }

        // return dist[n-1][m-1];

        return -1;
        
    }
}
